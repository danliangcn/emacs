* Basic Interface Settings
** no ugly gui elements
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
; Hiding the splash screen and banner
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC
** y-or-n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** no bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** pretty symbols
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config
      (add-hook 'prog-mode-hook 'pretty-mode)))
  ;   (global-prettify-symbols-mode t)) 
#+END_SRC
** line highlight
#+BEGIN_SRC emacs-lisp
(when window-system (global-hl-line-mode t))
#+END_SRC
** better scrolling
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** auto-indent
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** tooltip in the echo area
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)
#+END_SRC
** disabling prompts
#+BEGIN_SRC emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
	kill-buffer-query-functions))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
* Moving around emacs
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	     :ensure t
	     :init
	     (which-key-mode))
#+END_SRC
** switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "g" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** window splitting function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-window)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-window)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)


#+END_SRC
** swiper: a better search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC
** buffers
*** enable ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key(kbd "C-x b") 'ibuffer)
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** IDO
*** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
*** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
*** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
** kill ring
*** maximum entries on the ring
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)
#+END_SRC
*** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind 
    ("M-y" . popup-kill-ring))
  (global-set-key "\M-y" 'popup-kill-ring)
#+END_SRC
** expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
* Modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'google-this-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode))
  
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/img/xiaohui.png")
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "自强不息 止于至善"))
#+END_SRC
* Org
** basic config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** nicer bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** org directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org")

(setq org-default-notes-file (concat org-directory "/notes.org"))

(setq org-agenda-files '("~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/"))

(setq org-noter-notes-search-path '("~/downloads"))
#+END_SRC
** keybinding
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC
** capture templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Toread" entry (file+headline "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/toread.org" "Tasks")
         "* TODO %?\n %i\n %a")
        ("j" "Journal" entry (file+datetree "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/journal.org")
         "* %?\nEntered on %U\n %i\n %a")))
#+END_SRC
** set environment
#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
(setq org-use-speed-commands 1)

; set org mode to show long lines
(setq truncate-lines nil)

;; set path for pdflatex and xelatex and it's the direct path.
(setenv "PATH"
   (concat
    "/usr/local/texlive/2019/bin/x86_64-darwin" ":"
    (getenv "PATH")
    )
)

(require 'org)
#+END_SRC
** ref 
#+BEGIN_SRC emacs-lisp
(setq reftex-default-bibliography '("~/downloads/emacs/bibliography/library.bib"))

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/downloads/emacs/bibliography/notes.org"
      org-ref-default-bibliography '("~/downloads/emacs/bibliography/library.bib")
      org-ref-pdf-directory "~/downloads/emacs/bibliography/bibtex-pdfs/")

(add-hook 'org-ref-clean-bibtex-entry-hook 'org-ref-replace-nonascii)

(defun org-export-latex-no-toc (depth)
    (when depth
      (format "%% Org-mode is exporting headings to %s levels.\n"
              depth)))
(setq org-export-latex-format-toc-function 'org-export-latex-no-toc)

;(setq org-latex-pdf-process
;      '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))

;change to xelatex instead of pdflatex which doesn't support Chinese.
(setq org-latex-to-pdf-process 
  '("xelatex -interaction nonstopmode %f"
    "xelatex -interaction nonstopmode %f")) ;; for multiple passes

(require 'org-ref)

; reformat html export (it should be removed for nice latex format).
; generally it looks ok for pdf, but doesn't work for more advanced format.
(require 'org-ref-citeproc)
(add-hook 'org-export-before-parsing-hook 'orcp-citeproc)
(require 'ox-beamer)
#+END_SRC
* Minor conveniences
** config edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** config reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** load path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/downloads/emacs/")
#+END_SRC
** use google inside
#+BEGIN_SRC emacs-lisp
(google-this-mode 1)
#+END_SRC
* Text manipulation
** mark multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
* Programming
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC
* Pdf tools
#+BEGIN_SRC emacs-lisp
  (setenv "PKG_CONFIG_PATH" "/usr/local/lib/pkgconfig:/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig")
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page))
#+END_SRC
* Github
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC

